export interface APIEndpoint {
  path: string;
  method: string;
  description?: string;
  parameters?: Parameter[];
  requestBody?: any;
  responses?: { [statusCode: string]: any };
}

export interface Parameter {
  name: string;
  in: 'path' | 'query' | 'header' | 'body';
  required?: boolean;
  type?: string;
}

export interface TestCase {
  id: string;
  name: string;
  endpoint: APIEndpoint;
  input: any;
  expectedOutput: any;
  assertions: Assertion[];
  coverage: CoverageInfo;
  lastUpdated: Date;
  isObsolete?: boolean;
  autoGenerated?: boolean;
}

export interface Assertion {
  type: 'status' | 'schema' | 'value' | 'header' | 'performance';
  path?: string;
  expected: any;
  operator?: 'equals' | 'contains' | 'matches' | 'exists';
}

export interface CoverageInfo {
  lines?: number[];
  branches?: string[];
  functions?: string[];
  statements?: number;
}

export interface CodeChange {
  file: string;
  type: 'added' | 'modified' | 'deleted';
  changes: Change[];
  timestamp: Date;
}

export interface Change {
  type: 'endpoint' | 'schema' | 'logic' | 'validation';
  path: string;
  before?: any;
  after?: any;
}

export interface TestSuiteEvolution {
  version: string;
  timestamp: Date;
  changes: TestChange[];
  coverage: {
    before: number;
    after: number;
  };
  reason: string;
}

export interface TestChange {
  type: 'added' | 'updated' | 'removed';
  testId: string;
  reason: string;
  details?: any;
}

export interface EvolutionConfig {
  watchPaths: string[];
  testPaths: string[];
  updateThreshold: number; // % of change before updating tests
  coverageTarget: number; // Target coverage %
  aiEnabled?: boolean;
  openaiApiKey?: string;
  gitEnabled?: boolean;
}