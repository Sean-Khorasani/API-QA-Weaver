import { TestGenerator } from '../src/TestGenerator';
import { TestCase } from '../src/types';

describe('TestGenerator', () => {
  let generator: TestGenerator;
  let sampleTestCase: TestCase;

  beforeEach(() => {
    generator = new TestGenerator();
    sampleTestCase = {
      id: 'test_get_users_123',
      name: 'Test GET /api/users',
      endpoint: {
        path: '/api/users',
        method: 'GET'
      },
      input: {
        query: { limit: 10, offset: 0 }
      },
      expectedOutput: {
        status: 200
      },
      assertions: [
        { type: 'status', expected: 200 },
        { type: 'schema', expected: 'object' },
        { type: 'value', path: 'users', expected: 'array', operator: 'exists' }
      ],
      coverage: {
        lines: [],
        branches: [],
        functions: []
      },
      lastUpdated: new Date(),
      autoGenerated: true
    };
  });

  describe('generateTestCode', () => {
    it('should generate test code with template', async () => {
      const code = await generator.generateTestCode(sampleTestCase);

      expect(code).toContain('describe');
      expect(code).toContain('test(');
      expect(code).toContain('axios.get');
      expect(code).toContain('expect(response.status).toBe(200)');
      expect(code).toContain('/api/users');
    });

    it('should handle POST requests with body', async () => {
      const postTest: TestCase = {
        ...sampleTestCase,
        endpoint: { path: '/api/users', method: 'POST' },
        input: {
          body: { name: 'John', email: 'john@example.com' }
        },
        expectedOutput: { status: 201 }
      };

      const code = await generator.generateTestCode(postTest);

      expect(code).toContain('axios.post');
      expect(code).toContain('"name": "John"');
      expect(code).toContain('"email": "john@example.com"');
      expect(code).toContain('expect(response.status).toBe(201)');
    });

    it('should handle path parameters', async () => {
      const paramTest: TestCase = {
        ...sampleTestCase,
        endpoint: { path: '/api/users/{id}', method: 'GET' },
        input: {
          params: { id: '123' }
        }
      };

      const code = await generator.generateTestCode(paramTest);

      expect(code).toContain('/api/users/123');
    });

    it('should generate edge case tests', async () => {
      const code = await generator.generateTestCode(sampleTestCase);

      expect(code).toContain('Invalid Input');
      expect(code).toContain('Unauthorized');
      expect(code).toContain('expect(error.response.status)');
    });

    it('should include all assertions', async () => {
      const code = await generator.generateTestCode(sampleTestCase);

      // Status assertion
      expect(code).toContain('expect(response.status).toBe(200)');
      // Schema assertion
      expect(code).toContain("expect(typeof response.data).toBe('object')");
      // Value assertion
      expect(code).toContain('expect(response.data.users).toBeDefined()');
    });
  });

  describe('generateTestSuite', () => {
    it('should generate a complete test suite', async () => {
      const testCases: TestCase[] = [
        sampleTestCase,
        {
          ...sampleTestCase,
          id: 'test_post_users_124',
          name: 'Test POST /api/users',
          endpoint: { path: '/api/users', method: 'POST' },
          input: { body: { name: 'Test', email: 'test@test.com' } },
          expectedOutput: { status: 201 }
        },
        {
          ...sampleTestCase,
          id: 'test_get_products_125',
          name: 'Test GET /api/products',
          endpoint: { path: '/api/products', method: 'GET' }
        }
      ];

      const suite = await generator.generateTestSuite(testCases);

      expect(suite).toContain("describe('API Test Suite'");
      expect(suite).toContain("describe('/api/users'");
      expect(suite).toContain("describe('/api/products'");
      expect(suite).toContain('beforeAll');
      expect(suite).toContain('afterAll');
    });

    it('should group tests by endpoint', async () => {
      const testCases: TestCase[] = [
        sampleTestCase,
        {
          ...sampleTestCase,
          id: 'test_post_users',
          endpoint: { path: '/api/users', method: 'POST' }
        }
      ];

      const suite = await generator.generateTestSuite(testCases);

      // Both tests should be under the same describe block
      const userDescribeCount = (suite.match(/describe\('\/api\/users'/g) || []).length;
      expect(userDescribeCount).toBe(1);
    });
  });
});